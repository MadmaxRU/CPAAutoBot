import asyncio
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from gsheet import write_to_gsheet

BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot=bot, storage=MemoryStorage(), parse_mode=ParseMode.HTML)

class Form(StatesGroup):
    deal_type = State()
    car_brand = State()
    budget = State()
    contact = State()
    comment = State()

main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ö—É–ø–∏—Ç—å –≤ –∫—Ä–µ–¥–∏—Ç")],
        [KeyboardButton(text="–ö—É–ø–∏—Ç—å –∑–∞ –Ω–∞–ª–∏—á–Ω—ã–µ")],
        [KeyboardButton(text="–ö—É–ø–∏—Ç—å –≤ –ª–∏–∑–∏–Ω–≥")],
        [KeyboardButton(text="–ö—É–ø–∏—Ç—å –≤ —Ç—Ä–µ–π–¥-–∏–Ω")],
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

@dp.message(F.text.lower().in_(["/start", "–Ω–∞—á–∞—Ç—å", "–ø–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ"]))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∫—É–ø–∫–∏:", reply_markup=main_kb)
    await state.set_state(Form.deal_type)

@dp.message(Form.deal_type)
async def process_deal_type(message: Message, state: FSMContext):
    await state.update_data(deal_type=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
    await state.set_state(Form.car_brand)

@dp.message(Form.car_brand)
async def process_brand(message: Message, state: FSMContext):
    await state.update_data(car_brand=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç:")
    await state.set_state(Form.budget)

@dp.message(Form.budget)
async def process_budget(message: Message, state: FSMContext):
    await state.update_data(budget=message.text)
    contact_kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("–û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=contact_kb)
    await state.set_state(Form.contact)

@dp.message(Form.contact)
@dp.message(F.contact)
async def process_contact(message: Message, state: FSMContext):
    contact = message.contact.phone_number if message.contact else message.text
    await state.update_data(contact=contact)
    await message.answer("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–≤–æ–Ω–∫–∞:")
    await state.set_state(Form.comment)

@dp.message(Form.comment)
async def process_comment(message: Message, state: FSMContext):
    await state.update_data(comment=message.text)
    data = await state.get_data()
    write_to_gsheet(data)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.")
    await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
