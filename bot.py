
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
from gsheets import write_to_sheet

load_dotenv()
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher(bot)

user_data = {}

start_kb = ReplyKeyboardMarkup(resize_keyboard=True)
start_kb.add(KeyboardButton("üöó –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"))

consent_kb = InlineKeyboardMarkup()
consent_kb.add(InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="consent_yes"))
consent_kb.add(InlineKeyboardButton("‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="consent_no"))

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É.", reply_markup=start_kb)

@dp.message_handler(lambda message: message.text == "üöó –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def ask_brand(message: types.Message):
    user_data[message.from_user.id] = {}
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–º–æ–∂–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º):")

@dp.message_handler(lambda message: message.from_user.id in user_data and "brand" not in user_data[message.from_user.id])
async def ask_model(message: types.Message):
    user_data[message.from_user.id]["brand"] = message.text
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")

@dp.message_handler(lambda message: message.from_user.id in user_data and "model" not in user_data[message.from_user.id])
async def ask_city(message: types.Message):
    user_data[message.from_user.id]["model"] = message.text
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:")

@dp.message_handler(lambda message: message.from_user.id in user_data and "city" not in user_data[message.from_user.id])
async def ask_name(message: types.Message):
    user_data[message.from_user.id]["city"] = message.text
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

@dp.message_handler(lambda message: message.from_user.id in user_data and "name" not in user_data[message.from_user.id])
async def ask_phone(message: types.Message):
    user_data[message.from_user.id]["name"] = message.text
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

@dp.message_handler(lambda message: message.from_user.id in user_data and "phone" not in user_data[message.from_user.id])
async def ask_payment(message: types.Message):
    user_data[message.from_user.id]["phone"] = message.text
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("–õ–∏–∑–∏–Ω–≥"), KeyboardButton("–ö—Ä–µ–¥–∏—Ç"), KeyboardButton("–ù–∞–ª–∏—á–Ω—ã–µ"))
    await message.answer("–ö–∞–∫–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=kb)

@dp.message_handler(lambda message: message.from_user.id in user_data and "payment" not in user_data[message.from_user.id])
async def ask_year(message: types.Message):
    user_data[message.from_user.id]["payment"] = message.text
    await message.answer("–ö–∞–∫–æ–π –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç (–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω)?")

@dp.message_handler(lambda message: message.from_user.id in user_data and "year" not in user_data[message.from_user.id])
async def ask_budget(message: types.Message):
    user_data[message.from_user.id]["year"] = message.text
    await message.answer("–í–∞—à –ø—Ä–∏–º–µ—Ä–Ω—ã–π –±—é–¥–∂–µ—Ç (‚ÇΩ)?")

@dp.message_handler(lambda message: message.from_user.id in user_data and "budget" not in user_data[message.from_user.id])
async def ask_import(message: types.Message):
    user_data[message.from_user.id]["budget"] = message.text
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("–î–∞"), KeyboardButton("–ù–µ—Ç"))
    await message.answer("–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –∞–≤—Ç–æ –ø–æ–¥ –∑–∞–∫–∞–∑ –∏–∑-–∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã?", reply_markup=kb)

@dp.message_handler(lambda message: message.from_user.id in user_data and "import_interest" not in user_data[message.from_user.id])
async def ask_consent(message: types.Message):
    user_data[message.from_user.id]["import_interest"] = message.text
    await message.answer("–í—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?", reply_markup=consent_kb)

@dp.callback_query_handler(lambda call: call.data in ["consent_yes", "consent_no"])
async def process_consent(call: types.CallbackQuery):
    if call.data == "consent_no":
        await call.message.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        user_data.pop(call.from_user.id, None)
    else:
        uid = call.from_user.id
        data = user_data.get(uid, {})
        write_to_sheet([
            data.get("brand"), data.get("model"), data.get("city"),
            data.get("name"), data.get("phone"), data.get("payment"),
            data.get("year"), data.get("budget"), data.get("import_interest")
        ])
        await call.message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
        user_data.pop(uid, None)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
