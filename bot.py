
import datetime
import gspread
import telebot
from telebot import types
import os
import json
from oauth2client.service_account import ServiceAccountCredentials

BOT_TOKEN = os.getenv("BOT_TOKEN")
GOOGLE_CREDS_JSON = os.getenv("GOOGLE_CREDS_JSON")
SHEET_ID = os.getenv("SHEET_ID")

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_dict = json.loads(GOOGLE_CREDS_JSON)
credentials = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(credentials)
sheet = client.open_by_key(SHEET_ID).worksheet("Sheet1")

bot = telebot.TeleBot(BOT_TOKEN)
user_data = {}

@bot.message_handler(commands=["start", "reset"])
def start_handler(message):
    user_data[message.chat.id] = {}
    bot.send_message(message.chat.id, "üë§ –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")

@bot.message_handler(func=lambda message: message.chat.id in user_data and "name" not in user_data[message.chat.id])
def name_handler(message):
    user_data[message.chat.id]["name"] = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    phone_btn = types.KeyboardButton("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)
    markup.add(phone_btn)
    bot.send_message(message.chat.id, "üì± –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=markup)

@bot.message_handler(content_types=["contact"])
def contact_handler(message):
    user_data[message.chat.id]["phone"] = message.contact.phone_number
    bot.send_message(message.chat.id, "üèô –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?", reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(func=lambda message: message.chat.id in user_data and "phone" in user_data[message.chat.id] and "city" not in user_data[message.chat.id])
def city_handler(message):
    user_data[message.chat.id]["city"] = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    methods = ["–ù–∞–ª–∏—á–Ω—ã–µ", "–ö—Ä–µ–¥–∏—Ç", "–õ–∏–∑–∏–Ω–≥", "–¢—Ä–µ–π–¥-–∏–Ω"]
    for method in methods:
        markup.add(types.KeyboardButton(method))
    bot.send_message(message.chat.id, "üí∞ –ö–∞–∫–æ–π —Å–ø–æ—Å–æ–± –ø–æ–∫—É–ø–∫–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=markup)

@bot.message_handler(func=lambda message: message.chat.id in user_data and "payment_method" not in user_data[message.chat.id])
def payment_method_handler(message):
    user_data[message.chat.id]["payment_method"] = message.text
    if message.text == "–õ–∏–∑–∏–Ω–≥":
        bot.send_message(message.chat.id, "üè¢ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —é—Ä. –ª–∏—Ü–∞ (–ò–ü –∏–ª–∏ –û–û–û):")
    else:
        bot.send_message(message.chat.id, "üöó –£–∫–∞–∂–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")

@bot.message_handler(func=lambda message: message.chat.id in user_data and user_data[message.chat.id].get("payment_method") == "–õ–∏–∑–∏–Ω–≥" and "company" not in user_data[message.chat.id])
def company_handler(message):
    user_data[message.chat.id]["company"] = message.text
    bot.send_message(message.chat.id, "üìß –£–∫–∞–∂–∏—Ç–µ –≤–∞—à email:")

@bot.message_handler(func=lambda message: message.chat.id in user_data and user_data[message.chat.id].get("payment_method") == "–õ–∏–∑–∏–Ω–≥" and "email" not in user_data[message.chat.id])
def email_handler(message):
    user_data[message.chat.id]["email"] = message.text
    bot.send_message(message.chat.id, "üöó –£–∫–∞–∂–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")

@bot.message_handler(func=lambda message: message.chat.id in user_data and "car_brand" not in user_data[message.chat.id])
def car_handler(message):
    user_data[message.chat.id]["car_brand"] = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    budget_options = ["1‚Äì2 –º–ª–Ω", "2‚Äì4 –º–ª–Ω", "4‚Äì6 –º–ª–Ω", "6‚Äì10 –º–ª–Ω", "–ë–æ–ª—å—à–µ 10 –º–ª–Ω"]
    for b in budget_options:
        markup.add(types.KeyboardButton(b))
    bot.send_message(message.chat.id, "üíµ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.chat.id in user_data and "budget" not in user_data[message.chat.id])
def budget_handler(message):
    user_data[message.chat.id]["budget"] = message.text
    bot.send_message(message.chat.id, "üóì –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–≤–æ–Ω–∫–∞ (–ø–æ –∂–µ–ª–∞–Ω–∏—é):")

@bot.message_handler(func=lambda message: message.chat.id in user_data and "comment" not in user_data[message.chat.id])
def comment_handler(message):
    user_data[message.chat.id]["comment"] = message.text

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—É
    data = user_data[message.chat.id]
    sheet.append_row([
        data.get("name", ""),
        data.get("phone", ""),
        data.get("city", ""),
        data.get("payment_method", ""),
        data.get("company", ""),
        data.get("email", ""),
        data.get("car_brand", ""),
        data.get("budget", ""),
        data.get("comment", ""),
        datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    ])
    bot.send_message(message.chat.id, "‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –°–ø–∞—Å–∏–±–æ, –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")

bot.infinity_polling()
