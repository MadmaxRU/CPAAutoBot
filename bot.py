import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from gsheet import write_to_gsheet

API_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_data = {}

def make_keyboard(options):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    for opt in options:
        keyboard.add(KeyboardButton(opt))
    return keyboard

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    user_data[message.from_user.id] = {}
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")

@dp.message_handler(lambda msg: msg.from_user.id in user_data and "name" not in user_data[msg.from_user.id])
async def get_name(message: types.Message):
    user_data[message.from_user.id]["name"] = message.text
    await message.answer("üì± –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

@dp.message_handler(lambda msg: msg.from_user.id in user_data and "phone" not in user_data[msg.from_user.id])
async def get_phone(message: types.Message):
    user_data[message.from_user.id]["phone"] = message.text
    keyboard = make_keyboard(["Toyota", "Kia", "Chery", "Haval", "Geely"])
    await message.answer("üöó –í—ã–±–µ—Ä–∏ –º–∞—Ä–∫—É –∞–≤—Ç–æ:", reply_markup=keyboard)

@dp.message_handler(lambda msg: msg.from_user.id in user_data and "car_brand" not in user_data[msg.from_user.id])
async def get_brand(message: types.Message):
    user_data[message.from_user.id]["car_brand"] = message.text
    keyboard = make_keyboard(["2020", "2021", "2022", "2023", "2024"])
    await message.answer("üìÖ –í—ã–±–µ—Ä–∏ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞:", reply_markup=keyboard)

@dp.message_handler(lambda msg: msg.from_user.id in user_data and "year" not in user_data[msg.from_user.id])
async def get_year(message: types.Message):
    user_data[message.from_user.id]["year"] = message.text
    keyboard = make_keyboard(["–ù–∞–ª–∏—á–Ω—ã–µ", "–ö—Ä–µ–¥–∏—Ç", "–†–∞—Å—Å—Ä–æ—á–∫–∞"])
    await message.answer("üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=keyboard)

@dp.message_handler(lambda msg: msg.from_user.id in user_data and "payment_method" not in user_data[msg.from_user.id])
async def get_payment(message: types.Message):
    user_data[message.from_user.id]["payment_method"] = message.text
    keyboard = make_keyboard(["–î–∞", "–ù–µ—Ç"])
    await message.answer("üåç –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –∑–∞ –≥—Ä–∞–Ω–∏—Ü–µ–π?", reply_markup=keyboard)

@dp.message_handler(lambda msg: msg.from_user.id in user_data and "from_abroad" not in user_data[msg.from_user.id])
async def get_location(message: types.Message):
    user_data[message.from_user.id]["from_abroad"] = message.text
    keyboard = make_keyboard(["–°–æ–≥–ª–∞—Å–µ–Ω", "–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω"])
    await message.answer("‚úÖ –°–æ–≥–ª–∞—Å–Ω—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–∞–Ω–Ω—ã—Ö?", reply_markup=keyboard)

@dp.message_handler(lambda msg: msg.from_user.id in user_data and "agreement" not in user_data[msg.from_user.id])
async def get_agreement(message: types.Message):
    user_data[message.from_user.id]["agreement"] = message.text

    data = user_data.pop(message.from_user.id)
    data["lead_type"] = "bot_lead"
    data["city"] = "–ú–æ—Å–∫–≤–∞"

    write_to_gsheet(data)
    await message.answer("üéâ –°–ø–∞—Å–∏–±–æ! –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É.", reply_markup=types.ReplyKeyboardRemove())

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
