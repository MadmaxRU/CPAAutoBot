import os
import asyncio
from aiogram import Bot, Dispatcher, types 
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from gsheets import write_to_gsheet

API_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_data = {}

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("üöó –ö—É–ø–∏—Ç—å –∞–≤—Ç–æ"))
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=markup)

@dp.message_handler(lambda message: message.text == "üöó –ö—É–ø–∏—Ç—å –∞–≤—Ç–æ")
async def ask_name(message: types.Message):
    await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    user_data[message.from_user.id] = {}

@dp.message_handler(lambda message: message.from_user.id in user_data and not user_data[message.from_user.id].get("name"))
async def ask_city(message: types.Message):
    user_data[message.from_user.id]["name"] = message.text
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–ú–æ—Å–∫–≤–∞"), KeyboardButton("–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"))
    await message.answer("–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥:", reply_markup=markup)

@dp.message_handler(lambda message: message.from_user.id in user_data and not user_data[message.from_user.id].get("city"))
async def ask_brand(message: types.Message):
    user_data[message.from_user.id]["city"] = message.text
    await message.answer("–ù–∞–ø–∏—à–∏ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")

@dp.message_handler(lambda message: message.from_user.id in user_data and not user_data[message.from_user.id].get("car_brand"))
async def ask_payment(message: types.Message):
    user_data[message.from_user.id]["car_brand"] = message.text
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–ö—Ä–µ–¥–∏—Ç"), KeyboardButton("–ù–∞–ª–∏—á–Ω—ã–µ"))
    await message.answer("–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=markup)

@dp.message_handler(lambda message: message.from_user.id in user_data and not user_data[message.from_user.id].get("payment_method"))
async def ask_region(message: types.Message):
    user_data[message.from_user.id]["payment_method"] = message.text
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–î–∞"), KeyboardButton("–ù–µ—Ç"))
    await message.answer("–¢—ã –∏–∑ –¥—Ä—É–≥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞?", reply_markup=markup)

@dp.message_handler(lambda message: message.from_user.id in user_data and not user_data[message.from_user.id].get("from_abroad"))
async def ask_agreement(message: types.Message):
    user_data[message.from_user.id]["from_abroad"] = message.text
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–î–∞"), KeyboardButton("–ù–µ—Ç"))
    await message.answer("–°–æ–≥–ª–∞—Å–µ–Ω —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö?", reply_markup=markup)

@dp.message_handler(lambda message: message.from_user.id in user_data and not user_data[message.from_user.id].get("agreement"))
async def finish(message: types.Message):
    user_data[message.from_user.id]["agreement"] = message.text
    data = {
        "lead_type": "auto",
        "name": user_data[message.from_user.id]["name"],
        "city": user_data[message.from_user.id]["city"],
        "car_brand": user_data[message.from_user.id]["car_brand"],
        "payment_method": user_data[message.from_user.id]["payment_method"],
        "phone": f"+{message.from_user.id}",
        "from_abroad": user_data[message.from_user.id]["from_abroad"],
        "agreement": user_data[message.from_user.id]["agreement"]
    }
    write_to_gsheet(data)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
    user_data.pop(message.from_user.id)

async def main():
    await dp.start_polling()

if name == "main":
    asyncio.run(main())
