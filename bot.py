
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Google –¢–∞–±–ª–∏—Ü–∞–º
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("creds.json", scope)
client = gspread.authorize(creds)

# –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–∞–±–ª–∏—Ü—ã
sheet = client.open("CPAauto Leads").sheet1

def send_to_google_sheet(data):
    row = [
        data.get("name", ""),
        data.get("method", ""),
        data.get("brand", ""),
        data.get("budget", ""),
        data.get("city", ""),
        data.get("phone", "")
    ]
    sheet.append_row(row)



import telebot
from telebot import types

bot = telebot.TeleBot("YOUR_TELEGRAM_BOT_TOKEN")

user_data = {}

def reset_user(chat_id):
    user_data[chat_id] = {
        "state": "ask_name",
        "data": {}
    }

@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    reset_user(chat_id)
    bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –∫ –≤–∞–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")

@bot.message_handler(content_types=['contact'])
def contact_handler(message):
    chat_id = message.chat.id
    phone = message.contact.phone_number
    user_data[chat_id]["data"]["phone"] = phone

    finish_submission(chat_id)

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    chat_id = message.chat.id

    if chat_id not in user_data:
        reset_user(chat_id)

    state = user_data[chat_id]["state"]
    text = message.text.strip()

    if state == "ask_name":
        user_data[chat_id]["data"]["name"] = text
        user_data[chat_id]["state"] = "ask_method"
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("–ù–∞–ª–∏—á–Ω—ã–µ", "–ö—Ä–µ–¥–∏—Ç", "–õ–∏–∑–∏–Ω–≥", "–¢—Ä–µ–π–¥-–∏–Ω")
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∫—É–ø–∫–∏:", reply_markup=markup)

    elif state == "ask_method":
        user_data[chat_id]["data"]["method"] = text
        user_data[chat_id]["state"] = "ask_brand"
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=types.ReplyKeyboardRemove())

    elif state == "ask_brand":
        user_data[chat_id]["data"]["brand"] = text
        user_data[chat_id]["state"] = "ask_budget"
        bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç:")

    elif state == "ask_budget":
        user_data[chat_id]["data"]["budget"] = text
        user_data[chat_id]["state"] = "ask_city"
        bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥:")

    elif state == "ask_city":
        user_data[chat_id]["data"]["city"] = text
        user_data[chat_id]["state"] = "ask_phone"
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        button = types.KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
        markup.add(button)
        bot.send_message(chat_id, "–û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=markup)

    elif state == "ask_phone":
        user_data[chat_id]["data"]["phone"] = text
        finish_submission(chat_id)

def finish_submission(chat_id):
    data = user_data[chat_id]["data"]

    send_to_google_sheet(data)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    msg = f"""‚úÖ –°–ø–∞—Å–∏–±–æ, {data.get('name', '')}! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.
üìå –°–ø–æ—Å–æ–± –ø–æ–∫—É–ø–∫–∏: {data.get('method')}
üöó –ú–∞—Ä–∫–∞ –∞–≤—Ç–æ: {data.get('brand')}
üí∞ –ë—é–¥–∂–µ—Ç: {data.get('budget')}
üìç –ì–æ—Ä–æ–¥: {data.get('city')}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}"""
    )
    bot.send_message(chat_id, msg, reply_markup=types.ReplyKeyboardRemove())

    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É –∑–∞—è–≤–∫—É")
    bot.send_message(chat_id, "–•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É –∑–∞—è–≤–∫—É?", reply_markup=markup)

    user_data[chat_id]["state"] = "wait_restart"

@bot.message_handler(func=lambda message: message.text == "üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É –∑–∞—è–≤–∫—É")
def restart(message):
    start(message)

bot.polling(none_stop=True)
