
import datetime
import gspread
import telebot
from telebot import types
import os
import json
from oauth2client.service_account import ServiceAccountCredentials

BOT_TOKEN = os.getenv("BOT_TOKEN")
GOOGLE_CREDS_JSON = os.getenv("GOOGLE_CREDS_JSON")
SHEET_ID = os.getenv("SHEET_ID")

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_dict = json.loads(GOOGLE_CREDS_JSON)
credentials = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(credentials)
sheet = client.open_by_key(SHEET_ID).worksheet("Sheet1")

bot = telebot.TeleBot(BOT_TOKEN)
user_data = {}

regions = ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–î—Ä—É–≥–æ–π —Ä–µ–≥–∏–æ–Ω"]
brands = ["Toyota", "BMW", "Hyundai", "Kia", "Lada", "Mercedes", "Volkswagen", "Audi", "Chery", "Haval"]

@bot.message_handler(commands=["start", "reset"])
def start_handler(message):
    user_data[message.chat.id] = {}
    bot.send_message(message.chat.id, "üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ó–¥–µ—Å—å –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É –Ω–∞ –Ω–æ–≤–æ–µ –∞–≤—Ç–æ. üöó")

bot.send_message(message.chat.id, "üëã –î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! üë§ –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
@bot.message_handler(func=lambda m: m.chat.id in user_data and "name" not in user_data[m.chat.id])
def name_handler(message):
    user_data[message.chat.id]["name"] = message.text
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    button = types.KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
    keyboard.add(button)
    bot.send_message(message.chat.id, "üì± –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=keyboard)

@bot.message_handler(content_types=["contact"])
def contact_handler(message):
    user_data[message.chat.id]["contact"] = message.contact.phone_number
    keyboard = types.InlineKeyboardMarkup()
    for region in regions:
        keyboard.add(types.InlineKeyboardButton(text=region, callback_data=f"region_{region}"))
    bot.send_message(message.chat.id, "üèôÔ∏è –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith("region_"))
def region_handler(call):
    region = call.data.split("_", 1)[1]
    user_data[call.message.chat.id]["city"] = region
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    buttons = [
        ("üíµ –ù–∞–ª–∏—á–Ω—ã–µ", "pay_cash"),
        ("üí≥ –ö—Ä–µ–¥–∏—Ç", "pay_credit"),
        ("üìÑ –õ–∏–∑–∏–Ω–≥", "pay_leasing"),
        ("‚ôªÔ∏è –¢—Ä–µ–π–¥-–∏–Ω", "pay_tradein")
    ]
    for label, cb in buttons:
        keyboard.add(types.InlineKeyboardButton(label, callback_data=cb))
    bot.send_message(call.message.chat.id, "üí∞ –ö–∞–∫–æ–π —Å–ø–æ—Å–æ–± –ø–æ–∫—É–ø–∫–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith("pay_"))
def payment_handler(call):
    pay_type = call.data.split("_", 1)[1]
    user_data[call.message.chat.id]["payment"] = pay_type
    bot.send_message(call.message.chat.id, "üöó –£–∫–∞–∂–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")

@bot.message_handler(func=lambda m: m.chat.id in user_data and "brand" not in user_data[m.chat.id])
def brand_handler(message):
    user_data[message.chat.id]["brand"] = message.text
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    options = ["1‚Äì2 –º–ª–Ω", "2‚Äì4 –º–ª–Ω", "4‚Äì6 –º–ª–Ω", "6‚Äì10 –º–ª–Ω", "–ë–æ–ª—å—à–µ 10 –º–ª–Ω"]
    for opt in options:
        keyboard.add(opt)
    bot.send_message(message.chat.id, "üíµ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç:", reply_markup=keyboard)

@bot.message_handler(func=lambda m: m.chat.id in user_data and "budget" not in user_data[m.chat.id])
def budget_handler(message):
    user_data[message.chat.id]["budget"] = message.text
    bot.send_message(message.chat.id, "üóìÔ∏è –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–≤–æ–Ω–∫–∞ (–ø–æ –∂–µ–ª–∞–Ω–∏—é):")

@bot.message_handler(func=lambda m: m.chat.id in user_data and "comment" not in user_data[m.chat.id])
def comment_handler(message):
    user_data[message.chat.id]["comment"] = message.text
    save_to_sheet(message.chat.id)
    bot.send_message(message.chat.id, "‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!
üìû –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    bot.send_message(message.chat.id, "üîÅ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏—Ç–µ /start")

def save_to_sheet(chat_id):
    data = user_data.get(chat_id, {})
    now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    row = [
        now,
        data.get("payment", ""),
        data.get("brand", ""),
        "",  # –ù–∞–∑–≤–∞–Ω–∏–µ —é—Ä.–ª–∏—Ü–∞ ‚Äî –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ
        "",  # email ‚Äî –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ
        f"{data.get('name', '')}, {data.get('contact', '')}",
        data.get("budget", ""),
        data.get("city", ""),
        data.get("comment", "")
    ]
    sheet.append_row(row)

bot.polling(none_stop=True)
