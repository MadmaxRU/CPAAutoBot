import logging
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from gsheets import write_to_gsheet

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class LeadForm(StatesGroup):
    name = State()
    phone = State()
    city = State()
    car_brand = State()
    payment_method = State()
    from_abroad = State()
    agreement = State()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
    await message.answer("–î–∞–≤–∞–π—Ç–µ –ø–æ–¥–±–µ—Ä–µ–º –∞–≤—Ç–æ. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    await LeadForm.name.set()

@dp.message_handler(state=LeadForm.name)
async def get_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await LeadForm.phone.set()

@dp.message_handler(state=LeadForm.phone)
async def get_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("üèôÔ∏è –í –∫–∞–∫–æ–º –≤—ã –≥–æ—Ä–æ–¥–µ?")
    await LeadForm.city.set()

@dp.message_handler(state=LeadForm.city)
async def get_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.answer("üöó –£–∫–∞–∂–∏—Ç–µ –º–∞—Ä–∫—É –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –∞–≤—Ç–æ:")
    await LeadForm.car_brand.set()

@dp.message_handler(state=LeadForm.car_brand)
async def get_car_brand(message: types.Message, state: FSMContext):
    await state.update_data(car_brand=message.text)
    await message.answer("üí≥ –ö–∞–∫–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã? (–∫—Ä–µ–¥–∏—Ç / –Ω–∞–ª–∏—á–Ω—ã–µ / –ª–∏–∑–∏–Ω–≥)")
    await LeadForm.payment_method.set()

@dp.message_handler(state=LeadForm.payment_method)
async def get_payment_method(message: types.Message, state: FSMContext):
    await state.update_data(payment_method=message.text)
    await message.answer("üåç –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∞–≤—Ç–æ –∏–∑-–∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã? (–¥–∞ / –Ω–µ—Ç)")
    await LeadForm.from_abroad.set()

@dp.message_handler(state=LeadForm.from_abroad)
async def get_from_abroad(message: types.Message, state: FSMContext):
    await state.update_data(from_abroad=message.text)
    await message.answer("‚úÖ –ì–æ—Ç–æ–≤—ã –ª–∏ –≤—ã –∫ –∑–≤–æ–Ω–∫—É –æ—Ç –Ω–∞—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞? (–¥–∞ / –Ω–µ—Ç)")
    await LeadForm.agreement.set()

@dp.message_handler(state=LeadForm.agreement)
async def get_agreement(message: types.Message, state: FSMContext):
    await state.update_data(agreement=message.text)
    data = await state.get_data()
    data["lead_type"] = message.from_user.id
    write_to_gsheet(data)
    await message.answer("üéâ –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.")
    await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
