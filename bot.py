
import logging
import os
import json

from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message
from aiogram.filters import Command
from aiogram import Router

from dotenv import load_dotenv
from gsheets import write_to_gsheet

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher(storage=MemoryStorage())
router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class Form:
    waiting_for_payment_method = "waiting_for_payment_method"
    waiting_for_brand = "waiting_for_brand"
    waiting_for_legal_info = "waiting_for_legal_info"
    waiting_for_contact_info = "waiting_for_contact_info"
    waiting_for_comment = "waiting_for_comment"

user_data = {}

start_buttons = ["üöó –ö—É–ø–∏—Ç—å –∞–≤—Ç–æ", "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"]
start_kb = types.ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [types.KeyboardButton(text=btn)] for btn in start_buttons
])

budget_buttons = ["1‚Äì2 –º–ª–Ω", "2‚Äì4 –º–ª–Ω", "4‚Äì6 –º–ª–Ω", "6‚Äì10 –º–ª–Ω", ">10 –º–ª–Ω"]
budget_kb = types.ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [types.KeyboardButton(text=btn)] for btn in budget_buttons
])

payment_buttons = ["–ö—É–ø–∏—Ç—å –≤ –∫—Ä–µ–¥–∏—Ç", "–ö—É–ø–∏—Ç—å –∑–∞ –Ω–∞–ª–∏—á–Ω—ã–µ", "–ö—É–ø–∏—Ç—å –≤ –ª–∏–∑–∏–Ω–≥"]
payment_kb = types.ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [types.KeyboardButton(text=btn)] for btn in payment_buttons
])

@router.message(Command("start"))
@router.message(lambda message: message.text == "üöó –ö—É–ø–∏—Ç—å –∞–≤—Ç–æ")
async def start_handler(message: Message, state: FSMContext):
    await message.answer("–ö–∞–∫ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å?", reply_markup=payment_kb)
    await state.set_state(Form.waiting_for_payment_method)
    user_data[message.from_user.id] = {}

@router.message(lambda msg: msg.text in payment_buttons)
async def payment_method_handler(message: Message, state: FSMContext):
    user_data[message.from_user.id]["–û–ø–ª–∞—Ç–∞"] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
    await state.set_state(Form.waiting_for_brand)

@router.message(lambda msg: msg.text not in payment_buttons and msg.text not in start_buttons)
async def brand_handler(message: Message, state: FSMContext):
    user_data[message.from_user.id]["–ú–∞—Ä–∫–∞"] = message.text
    if user_data[message.from_user.id]["–û–ø–ª–∞—Ç–∞"] == "–ö—É–ø–∏—Ç—å –≤ –ª–∏–∑–∏–Ω–≥":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù:")
        await state.set_state(Form.waiting_for_legal_info)
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        await state.set_state(Form.waiting_for_contact_info)

@router.message(lambda msg: msg.text and "–ò–ù–ù" not in user_data.get(msg.from_user.id, {}))
async def inn_handler(message: Message, state: FSMContext):
    user_data[message.from_user.id]["–ò–ù–ù"] = message.text
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç:", reply_markup=budget_kb)
    await state.set_state(Form.waiting_for_contact_info)

@router.message(lambda msg: msg.text in budget_buttons)
async def budget_handler(message: Message, state: FSMContext):
    user_data[message.from_user.id]["–ë—é–¥–∂–µ—Ç"] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:")
    await state.set_state(Form.waiting_for_comment)

@router.message(lambda msg: msg.text and "–ì–æ—Ä–æ–¥" not in user_data.get(msg.from_user.id, {}))
async def city_handler(message: Message, state: FSMContext):
    user_data[message.from_user.id]["–ì–æ—Ä–æ–¥"] = message.text
    await message.answer("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–≤–æ–Ω–∫–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ - ):")
    await state.set_state(Form.waiting_for_comment)

@router.message()
async def comment_handler(message: Message, state: FSMContext):
    user_data[message.from_user.id]["–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"] = message.text
    await write_to_gsheet(user_data[message.from_user.id])
    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã.", reply_markup=start_kb)
    await state.clear()

@router.message(lambda msg: msg.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
async def manager_contact(message: Message):
    await message.answer("–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.", reply_markup=start_kb)

dp.include_router(router)

if __name__ == "__main__":
    import asyncio
    async def main():
        await dp.start_polling(bot)
    asyncio.run(main())
