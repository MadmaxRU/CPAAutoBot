
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class LeadForm(StatesGroup):
    name = State()
    phone = State()
    city = State()
    car_brand = State()
    payment_method = State()
    from_abroad = State()
    agreement = State()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands="start")
async def cmd_start(message: types.Message):
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
    await message.answer("–î–∞–≤–∞–π—Ç–µ –ø–æ–¥–±–µ—Ä–µ–º –∞–≤—Ç–æ. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    await LeadForm.name.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏
@dp.message_handler(state=LeadForm.name)
async def get_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await LeadForm.phone.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message_handler(state=LeadForm.phone)
async def get_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("üèôÔ∏è –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:")
    await LeadForm.city.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞
@dp.message_handler(state=LeadForm.city)
async def get_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.answer("üöó –ö–∞–∫–∞—è –º–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")
    await LeadForm.car_brand.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ
@dp.message_handler(state=LeadForm.car_brand)
async def get_car_brand(message: types.Message, state: FSMContext):
    await state.update_data(car_brand=message.text)
    await message.answer("üí≥ –ö–∞–∫–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? (–Ω–∞–ª–∏—á–Ω—ã–µ, –∫—Ä–µ–¥–∏—Ç, –ª–∏–∑–∏–Ω–≥)")
    await LeadForm.payment_method.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
@dp.message_handler(state=LeadForm.payment_method)
async def get_payment_method(message: types.Message, state: FSMContext):
    await state.update_data(payment_method=message.text)
    await message.answer("üåç –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –∞–≤—Ç–æ –ø–æ–¥ –∑–∞–∫–∞–∑ –∏–∑-–∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã? (–¥–∞/–Ω–µ—Ç)")
    await LeadForm.from_abroad.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑-–∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
@dp.message_handler(state=LeadForm.from_abroad)
async def get_from_abroad(message: types.Message, state: FSMContext):
    await state.update_data(from_abroad=message.text)
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", "‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω")
    await message.answer("–í—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?", reply_markup=keyboard)
    await LeadForm.agreement.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è
@dp.message_handler(state=LeadForm.agreement)
async def get_agreement(message: types.Message, state: FSMContext):
    if message.text == "‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω":
        data = await state.get_data()
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google Sheets –∏–ª–∏ –ë–î
        await message.answer("üéâ –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=types.ReplyKeyboardRemove())
    else:
        await message.answer("‚ùó –ë–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=types.ReplyKeyboardRemove())
    await state.finish()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
