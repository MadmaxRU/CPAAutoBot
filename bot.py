
import logging
import os

from aiogram import Bot, Dispatcher, Router, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from dotenv import load_dotenv

from gsheets import write_to_gsheet

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()
dp.include_router(router)

user_data = {}

start_kb = ReplyKeyboardMarkup(
    keyboard=[[
        KeyboardButton(text="–ö—É–ø–∏—Ç—å –≤ –∫—Ä–µ–¥–∏—Ç"),
        KeyboardButton(text="–ö—É–ø–∏—Ç—å –∑–∞ –Ω–∞–ª–∏—á–Ω—ã–µ"),
        KeyboardButton(text="–ö—É–ø–∏—Ç—å –≤ –ª–∏–∑–∏–Ω–≥"),
        KeyboardButton(text="–ö—É–ø–∏—Ç—å –≤ —Ç—Ä–µ–π–¥-–∏–Ω")
    ]],
    resize_keyboard=True
)


@router.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∫—É–ø–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=start_kb)


@router.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    text = message.text

    if user_id not in user_data:
        user_data[user_id] = {"step": "purchase_type"}

    state = user_data[user_id]

    if state["step"] == "purchase_type":
        state["purchase_type"] = text
        state["step"] = "brand"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=ReplyKeyboardRemove())
    elif state["step"] == "brand":
        state["brand"] = text
        if state["purchase_type"] == "–ö—É–ø–∏—Ç—å –≤ –ª–∏–∑–∏–Ω–≥":
            state["step"] = "entity_type"
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º—É —é—Ä–ª–∏—Ü–∞ (–ò–ü –∏–ª–∏ –û–û–û):")
        else:
            state["step"] = "contact"
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ email):", reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]],
                resize_keyboard=True
            ))
    elif state["step"] == "entity_type":
        state["entity_type"] = text
        state["step"] = "inn"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù:")
    elif state["step"] == "inn":
        state["inn"] = text
        state["step"] = "email"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ email:")
    elif state["step"] == "email":
        state["email"] = text
        state["step"] = "budget"
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç:") 
1‚Äì2 –º–ª–Ω
2‚Äì4 –º–ª–Ω
4‚Äì6 –º–ª–Ω
6‚Äì10 –º–ª–Ω
>10 –º–ª–Ω")
    elif state["step"] == "contact":
        state["contact"] = text
        state["step"] = "budget"
        await message.answer(
"–£–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç:\n"
"1-2 –º–ª–Ω\n"
"2-4 –º–ª–Ω\n"
"4-6 –º–ª–Ω\n"
"6-10 –º–ª–Ω\n"
">10 –º–ª–Ω"
)
    elif state["step"] == "budget":
        state["budget"] = text
        state["step"] = "city"
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥:")
    elif state["step"] == "city":
        state["city"] = text
        state["step"] = "comment"
        await message.answer("–ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–≤–æ–Ω–∫–∞:")
    elif state["step"] == "comment":
        state["comment"] = text

        data = user_data.pop(user_id)
        write_to_gsheet(data)

        await message.answer("–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=start_kb)


if __name__ == "__main__":
    import asyncio
    logging.basicConfig(level=logging.INFO)
    asyncio.run(dp.start_polling(bot))
