import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv
from gsheets import write_to_sheet

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class LeadForm(StatesGroup):
    name = State()
    phone = State()
    city = State()
    car_brand = State()
    payment_method = State()
    from_abroad = State()
    agreement = State()

@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!

–î–∞–≤–∞–π—Ç–µ –ø–æ–¥–±–µ—Ä–µ–º –∞–≤—Ç–æ. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    await LeadForm.name.set()

@dp.message_handler(state=LeadForm.name)
async def get_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await LeadForm.phone.set()

@dp.message_handler(state=LeadForm.phone)
async def get_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("üèô –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
    await LeadForm.city.set()

@dp.message_handler(state=LeadForm.city)
async def get_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.answer("üöó –ö–∞–∫–∞—è –º–∞—Ä–∫–∞ –∞–≤—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")
    await LeadForm.car_brand.set()

@dp.message_handler(state=LeadForm.car_brand)
async def get_brand(message: types.Message, state: FSMContext):
    await state.update_data(car_brand=message.text)
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üí≥ –ö—Ä–µ–¥–∏—Ç", "üíº –õ–∏–∑–∏–Ω–≥", "üí∞ –ù–∞–ª–∏—á–Ω—ã–µ")
    await message.answer("üí∏ –ö–∞–∫–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=keyboard)
    await LeadForm.payment_method.set()

@dp.message_handler(state=LeadForm.payment_method)
async def get_payment(message: types.Message, state: FSMContext):
    await state.update_data(payment_method=message.text)
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üá∑üá∫ –¢–æ–ª—å–∫–æ –†–§", "üåç –•–æ—á—É –∞–≤—Ç–æ –∏–∑-–∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã")
    await message.answer("üöö –ù—É–∂–Ω–æ –ª–∏ –ø—Ä–∏–≤–µ–∑—Ç–∏ –∞–≤—Ç–æ –∏–∑-–∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã?", reply_markup=keyboard)
    await LeadForm.from_abroad.set()

@dp.message_handler(state=LeadForm.from_abroad)
async def get_from_abroad(message: types.Message, state: FSMContext):
    await state.update_data(from_abroad=message.text)
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="agree"))
    await message.answer("üõ° –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", reply_markup=kb)
    await LeadForm.agreement.set()

@dp.callback_query_handler(lambda c: c.data == "agree", state=LeadForm.agreement)
async def agreement_done(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer("–°–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!")
    data = await state.get_data()
    write_to_sheet(data)
    await bot.send_message(callback_query.from_user.id, "‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
    await state.finish()

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
