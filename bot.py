from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import os
from gsheet import write_to_gsheet

API_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_data = {}

start_kb = ReplyKeyboardMarkup(resize_keyboard=True)
start_kb.add(KeyboardButton("üöó –ö—É–ø–∏—Ç—å –∞–≤—Ç–æ"))

@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=start_kb)

@dp.message_handler(lambda message: message.text == "üöó –ö—É–ø–∏—Ç—å –∞–≤—Ç–æ")
async def ask_name(message: types.Message):
    await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    user_data[message.from_user.id] = {}

@dp.message_handler(lambda message: message.from_user.id in user_data and "name" not in user_data[message.from_user.id])
async def get_name(message: types.Message):
    user_data[message.from_user.id]["name"] = message.text
    kb = ReplyKeyboardMarkup(resize_keyboard=True).add("–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å")
    await message.answer("–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥:", reply_markup=kb)

@dp.message_handler(lambda message: message.from_user.id in user_data and "city" not in user_data[message.from_user.id])
async def get_city(message: types.Message):
    user_data[message.from_user.id]["city"] = message.text
    kb = ReplyKeyboardMarkup(resize_keyboard=True).add("Toyota", "Lada", "Kia", "Chery")
    await message.answer("–í—ã–±–µ—Ä–∏ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=kb)

@dp.message_handler(lambda message: message.from_user.id in user_data and "car_brand" not in user_data[message.from_user.id])
async def get_car(message: types.Message):
    user_data[message.from_user.id]["car_brand"] = message.text
    kb = ReplyKeyboardMarkup(resize_keyboard=True).add("–ö—Ä–µ–¥–∏—Ç", "–ù–∞–ª–∏—á–Ω—ã–µ", "–†–∞—Å—Å—Ä–æ—á–∫–∞")
    await message.answer("–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=kb)

@dp.message_handler(lambda message: message.from_user.id in user_data and "payment_method" not in user_data[message.from_user.id])
async def get_payment(message: types.Message):
    user_data[message.from_user.id]["payment_method"] = message.text
    kb = ReplyKeyboardMarkup(resize_keyboard=True).add("–î–∞", "–ù–µ—Ç")
    await message.answer("–¢—ã –∏–∑ –¥—Ä—É–≥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞?", reply_markup=kb)

@dp.message_handler(lambda message: message.from_user.id in user_data and "from_abroad" not in user_data[message.from_user.id])
async def get_from_abroad(message: types.Message):
    user_data[message.from_user.id]["from_abroad"] = message.text
    kb = ReplyKeyboardMarkup(resize_keyboard=True).add("–î–∞", "–ù–µ—Ç")
    await message.answer("–°–æ–≥–ª–∞—Å–µ–Ω —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö?", reply_markup=kb)

@dp.message_handler(lambda message: message.from_user.id in user_data and "agreement" not in user_data[message.from_user.id])
async def get_agreement(message: types.Message):
    user_data[message.from_user.id]["agreement"] = message.text
    user_data[message.from_user.id]["phone"] = f"+{message.from_user.id}"
    user_data[message.from_user.id]["lead_type"] = "bot"

    write_to_gsheet(user_data[message.from_user.id])
    await message.answer("–°–ø–∞—Å–∏–±–æ! –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã ‚úÖ")
    del user_data[message.from_user.id]

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
