
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

user_data = {}

start_kb = ReplyKeyboardMarkup(resize_keyboard=True)
start_kb.add(KeyboardButton("‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"))

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É:", reply_markup=start_kb)

@dp.message_handler(lambda message: message.text == "‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def ask_car_brand(message: types.Message):
    user_data[message.from_user.id] = {}
    await message.answer("üöó –£–∫–∞–∂–∏ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")

@dp.message_handler(lambda message: "car_brand" not in user_data.get(message.from_user.id, {}))
async def get_car_brand(message: types.Message):
    user_data[message.from_user.id]["car_brand"] = message.text
    await message.answer("üèôÔ∏è –£–∫–∞–∂–∏ –≥–æ—Ä–æ–¥:")

@dp.message_handler(lambda message: "city" not in user_data.get(message.from_user.id, {}))
async def get_city(message: types.Message):
    user_data[message.from_user.id]["city"] = message.text
    await message.answer("üìû –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

@dp.message_handler(lambda message: "phone" not in user_data.get(message.from_user.id, {}))
async def get_phone(message: types.Message):
    user_data[message.from_user.id]["phone"] = message.text
    await message.answer("üßë –£–∫–∞–∂–∏ —Å–≤–æ—ë –∏–º—è:")

@dp.message_handler(lambda message: "name" not in user_data.get(message.from_user.id, {}))
async def get_name(message: types.Message):
    user_data[message.from_user.id]["name"] = message.text
    await ask_payment_method(message)

async def ask_payment_method(message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üí∞ –ù–∞–ª–∏—á–Ω—ã–µ"), KeyboardButton("üè¶ –ö—Ä–µ–¥–∏—Ç"), KeyboardButton("üîÑ –õ–∏–∑–∏–Ω–≥"))
    kb.add(KeyboardButton("üöõ –ó–∞–∫–∞–∑ –∏–∑-–∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã"))
    await message.answer("üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –∞–≤—Ç–æ:", reply_markup=kb)

@dp.message_handler(lambda message: "acquisition" not in user_data.get(message.from_user.id, {}))
async def get_acquisition(message: types.Message):
    user_data[message.from_user.id]["acquisition"] = message.text
    await message.answer("üìÖ –ö–∞–∫–æ–π –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç (–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω)?")

@dp.message_handler(lambda message: "year" not in user_data.get(message.from_user.id, {}))
async def get_year(message: types.Message):
    user_data[message.from_user.id]["year"] = message.text
    await message.answer("üí∏ –í–∞—à –ø—Ä–∏–º–µ—Ä–Ω—ã–π –±—é–¥–∂–µ—Ç (‚ÇΩ)?")

@dp.message_handler(lambda message: "budget" not in user_data.get(message.from_user.id, {}))
async def get_budget(message: types.Message):
    user_data[message.from_user.id]["budget"] = message.text
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω"), KeyboardButton("‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω"))
    await message.answer("üõ°Ô∏è –í—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?", reply_markup=kb)

@dp.message_handler(lambda message: message.text in ["‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", "‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω"])
async def final_step(message: types.Message):
    user_data[message.from_user.id]["consent"] = message.text
    if message.text == "‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω":
        await message.answer("üéâ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
    else:
        await message.answer("‚ùó –ë–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É.")

if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp)
