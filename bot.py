
import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import CommandStart
from gsheet import write_to_gsheet

API_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

class Form(StatesGroup):
    name = State()
    city = State()
    brand = State()
    payment = State()
    region = State()
    agreement = State()

@dp.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("üöó –ö—É–ø–∏—Ç—å –∞–≤—Ç–æ"))
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=markup)

@dp.message(lambda message: message.text == "üöó –ö—É–ø–∏—Ç—å –∞–≤—Ç–æ")
async def start_form(message: types.Message, state: FSMContext):
    await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Form.name)

@dp.message(Form.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥:")
    await state.set_state(Form.city)

@dp.message(Form.city)
async def process_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.answer("–í–≤–µ–¥–∏ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
    await state.set_state(Form.brand)

@dp.message(Form.brand)
async def process_brand(message: types.Message, state: FSMContext):
    await state.update_data(brand=message.text)
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–ù–∞–ª–∏—á–Ω—ã–µ"), KeyboardButton("–ö—Ä–µ–¥–∏—Ç"))
    await message.answer("–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=markup)
    await state.set_state(Form.payment)

@dp.message(Form.payment)
async def process_payment(message: types.Message, state: FSMContext):
    await state.update_data(payment=message.text)
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–î–∞"), KeyboardButton("–ù–µ—Ç"))
    await message.answer("–¢—ã –∏–∑ –¥—Ä—É–≥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞?", reply_markup=markup)
    await state.set_state(Form.region)

@dp.message(Form.region)
async def process_region(message: types.Message, state: FSMContext):
    await state.update_data(region=message.text)
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–î–∞"))
    await message.answer("–°–æ–≥–ª–∞—Å–µ–Ω —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö?", reply_markup=markup)
    await state.set_state(Form.agreement)

@dp.message(Form.agreement)
async def process_agreement(message: types.Message, state: FSMContext):
    await state.update_data(agreement=message.text)
    data = await state.get_data()
    write_to_gsheet(data)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã. üöó", reply_markup=ReplyKeyboardRemove())
    await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
