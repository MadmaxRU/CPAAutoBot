from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

bot = Bot(token="–í–ê–®_–¢–û–ö–ï–ù")
dp = Dispatcher(bot, storage=MemoryStorage())

class LeadForm(StatesGroup):
    brand = State()
    model = State()
    year = State()
    phone = State()

@dp.message_handler(commands='start')
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üöó –ö–∞–∫–∞—è –º–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")
    await LeadForm.brand.set()

@dp.message_handler(state=LeadForm.brand)
async def ask_model(message: types.Message, state: FSMContext):
    await state.update_data(brand=message.text)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫–∞—è –º–æ–¥–µ–ª—å?")
    await LeadForm.model.set()

@dp.message_handler(state=LeadForm.model)
async def ask_year(message: types.Message, state: FSMContext):
    await state.update_data(model=message.text)
    await message.answer("–ö–∞–∫–æ–π –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞?")
    await LeadForm.year.set()

@dp.message_handler(state=LeadForm.year)
async def ask_phone(message: types.Message, state: FSMContext):
    await state.update_data(year=message.text)
    await message.answer("–û—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:")
    await LeadForm.phone.set()

@dp.message_handler(state=LeadForm.phone)
async def finish(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    data = await state.get_data()
    
    # –¢—É—Ç –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Google Sheets, CRM –∏ —Ç.–¥.
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
    await state.finish()
