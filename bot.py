import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from gsheet import write_to_gsheet
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN, default=Bot.default_parse_mode(ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

logging.basicConfig(level=logging.INFO)

class Form(StatesGroup):
    method = State()
    company_type = State()
    inn = State()
    email = State()
    brand = State()
    budget = State()
    city = State()
    contact = State()
    comment = State()

start_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ö—É–ø–∏—Ç—å –≤ –∫—Ä–µ–¥–∏—Ç")],
        [KeyboardButton(text="–ö—É–ø–∏—Ç—å –∑–∞ –Ω–∞–ª–∏—á–Ω—ã–µ")],
        [KeyboardButton(text="–ö—É–ø–∏—Ç—å –≤ –ª–∏–∑–∏–Ω–≥")],
        [KeyboardButton(text="–ö—É–ø–∏—Ç—å –ø–æ —Ç—Ä–µ–π–¥-–∏–Ω")]
    ],
    resize_keyboard=True
)

budget_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="1-2 –º–ª–Ω"), KeyboardButton(text="2-4 –º–ª–Ω")],
        [KeyboardButton(text="4-6 –º–ª–Ω"), KeyboardButton(text="6-10 –º–ª–Ω")],
        [KeyboardButton(text="–ë–æ–ª–µ–µ 10 –º–ª–Ω")]
    ],
    resize_keyboard=True
)

@dp.message(F.text.in_(["–ö—É–ø–∏—Ç—å –≤ –∫—Ä–µ–¥–∏—Ç", "–ö—É–ø–∏—Ç—å –∑–∞ –Ω–∞–ª–∏—á–Ω—ã–µ", "–ö—É–ø–∏—Ç—å –≤ –ª–∏–∑–∏–Ω–≥", "–ö—É–ø–∏—Ç—å –ø–æ —Ç—Ä–µ–π–¥-–∏–Ω"]))
async def choose_method(message: Message, state: FSMContext):
    await state.set_state(Form.method)
    await state.update_data(method=message.text)

    if message.text == "–ö—É–ø–∏—Ç—å –≤ –ª–∏–∑–∏–Ω–≥":
        kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ò–ü"), KeyboardButton(text="–û–û–û")]
            ],
            resize_keyboard=True
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É —é—Ä. –ª–∏—Ü–∞:", reply_markup=kb)
        await state.set_state(Form.company_type)
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Form.brand)

@dp.message(Form.company_type)
async def get_company_type(message: Message, state: FSMContext):
    await state.update_data(company_type=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù:")
    await state.set_state(Form.inn)

@dp.message(Form.inn)
async def get_inn(message: Message, state: FSMContext):
    await state.update_data(inn=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ e-mail:")
    await state.set_state(Form.email)

@dp.message(Form.email)
async def get_email(message: Message, state: FSMContext):
    await state.update_data(email=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Form.brand)

@dp.message(Form.brand)
async def get_brand(message: Message, state: FSMContext):
    await state.update_data(brand=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç:", reply_markup=budget_kb)
    await state.set_state(Form.budget)

@dp.message(Form.budget)
async def get_budget(message: Message, state: FSMContext):
    await state.update_data(budget=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥:")
    await state.set_state(Form.city)

@dp.message(Form.city)
async def get_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    contact_kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä:", reply_markup=contact_kb)
    await state.set_state(Form.contact)

@dp.message(Form.contact)
async def get_contact(message: Message, state: FSMContext):
    contact = message.contact.phone_number if message.contact else message.text
    await state.update_data(contact=contact)
    await message.answer("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–≤–æ–Ω–∫–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
    await state.set_state(Form.comment)

@dp.message(Form.comment)
async def get_comment(message: Message, state: FSMContext):
    await state.update_data(comment=message.text)
    data = await state.get_data()
    write_to_gsheet(data)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    await state.clear()

@dp.message()
async def fallback(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=start_kb)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
